<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test automation on Home</title>
    <link>https://rookieintraining.github.io/categories/test-automation/</link>
    <description>Recent content in test automation on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Feb 2020 21:47:38 +0530</lastBuildDate>
    
	<atom:link href="https://rookieintraining.github.io/categories/test-automation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding the Selenium Webdriver</title>
      <link>https://rookieintraining.github.io/posts/understanding-selenium-webdriver/</link>
      <pubDate>Wed, 19 Feb 2020 21:47:38 +0530</pubDate>
      
      <guid>https://rookieintraining.github.io/posts/understanding-selenium-webdriver/</guid>
      <description>With countless blogs and documentation fuelling my experiments, here is what I&amp;rsquo;ve been able to learn of the WebDriver and the W3C WebDriver Protocol.
Selenium WebDriver refers to both the language bindings and the implementations of the individual browser controlling code. This is commonly referred to as just WebDriver.
Selenium WebDriver is a W3C Recommendation
To further simplify the understanding, I define the WebDriver as :
It implements a set of REST-ish like APIs mentioned as part of the W3C WebDriver Protocol which perform the relevant actions such as clicks, sending text to input, etc as per the specifications.</description>
    </item>
    
    <item>
      <title>Generating HTML reports for your tests viaÂ Gradle</title>
      <link>https://rookieintraining.github.io/posts/gradle-reporting-easy-way/</link>
      <pubDate>Mon, 17 Feb 2020 18:45:18 +0530</pubDate>
      
      <guid>https://rookieintraining.github.io/posts/gradle-reporting-easy-way/</guid>
      <description>There are many frameworks for your reporting needs (two of the most notable ones are Allure and Extent reports) in the market today, even gradle provides an in-house html report on execution of a junit/testng test.
In case your project is on gradle and you want to customize the reports or your tests run via a CLI, here I try to explain an easy way to start with generating your own custom HTML reports via gradle tasks using the Groovy MarkupBuilder.</description>
    </item>
    
  </channel>
</rss>